# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
import base64
import json
import logging
import boto3
from botocore.config import Config
from botocore.exceptions import ClientError

class ImageError(Exception):
    def __init__(self, message):
        self.message = message

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def generate_base64_image(model_id, body):
    """
    Generate an image using Amazon Nova Canvas model on demand and returns it as a base64 encoded string.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        base64_image (str): The base64 encoded image generated by the model.
    """
    logger.info(f"Generating image with Amazon Nova Canvas model {model_id}")
    bedrock = boto3.client(
        service_name='bedrock-runtime',
        config=Config(read_timeout=300)
    )
    accept = "application/json"
    content_type = "application/json"
    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())
    base64_image = response_body.get("images")[0]
    finish_reason = response_body.get("error")
    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")
    logger.info(f"Successfully generated image with Amazon Nova Canvas model {model_id}")
    return base64_image

def get_image_from_s3(bucket_name, object_key):
    """
    Retrieves an image from S3 and returns it as a base64 encoded string.
    Args:
        bucket_name (str): The name of the S3 bucket.
        object_key (str): The key of the object (image file) in the bucket.
    Returns:
        base64_image (str): The base64 encoded image retrieved from S3, or None if an error occurs.
    """
    s3 = boto3.client('s3')
    try:
        response = s3.get_object(Bucket=bucket_name, Key=object_key)
        image_data = response['Body'].read()
        base64_image = base64.b64encode(image_data).decode('utf-8')
        logger.info(f"Successfully retrieved and encoded image from s3://{bucket_name}/{object_key}")
        return base64_image
    except ClientError as e:
        logger.error(f"Error retrieving image from S3: {e}")
        return None

def lambda_handler(event, context):
    """
    Lambda handler function that generates a base64 encoded image based on a prompt and an optional condition image from S3.
    """
    model_id = 'amazon.nova-canvas-v1:0'
    content_prompt = event.get('content_prompt')
    style_prompt = event.get('style', "simple, non-realistic illustration suitable for children's math practice with clear, countable objects and minimal background.") # Default style if not provided
    image_path = event.get('image_path')

    if not content_prompt:
        logger.error("Missing 'content_prompt' in the event.")
        return {
            'statusCode': 400,
            'body': json.dumps({'error': "Missing 'content_prompt' in the event."})
        }

    condition_image_base64 = None
    if image_path:
        try:
            bucket_name, object_key = image_path.replace("s3://", "").split("/", 1)
            condition_image_base64 = get_image_from_s3(bucket_name, object_key)
            if not condition_image_base64:
                return {
                    'statusCode': 400,
                    'body': json.dumps({'error': f"Could not retrieve image from S3 path: {image_path}"})
                }
        except ValueError:
            logger.error(f"Invalid S3 image path format: {image_path}. Expected format: s3://<bucket_name>/<object_key>")
            return {
                'statusCode': 400,
                'body': json.dumps({'error': f"Invalid S3 image path format: {image_path}. Expected format: s3://<bucket_name>/<object_key>"})
            }

    full_prompt = f"{content_prompt}. The image should be in a {style_prompt}."
    print(full_prompt)

    request_body = {
        "taskType": "TEXT_IMAGE",
        "textToImageParams": {
            "text": full_prompt,
        },
        "imageGenerationConfig": {
            "numberOfImages": 1,
            "height": 1024,
            "width": 1024,
            "cfgScale": 8.0,
            "seed": 0
        }
    }

    if condition_image_base64:
        request_body["textToImageParams"]["conditionImage"] = condition_image_base64

    body = json.dumps(request_body)

    try:
        base64_image = generate_base64_image(model_id=model_id, body=body)
        return {
            'statusCode': 200,
            'body': json.dumps({'base64_image': base64_image})
        }
    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error(f"A client error occurred: {message}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': f"Client error: {message}"})
        }
    except ImageError as err:
        logger.error(err.message)
        return {
            'statusCode': 500,
            'body': json.dumps({'error': err.message})
        }
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': f"Unexpected error: {e}"})
        }